/* Sources.vala
 *
 * Copyright (C) 2009 - 2016 Jerry Casiano
 *
 * This file is part of Font Manager.
 *
 * Font Manager is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Font Manager is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Font Manager.  If not, see <http://www.gnu.org/licenses/gpl-3.0.txt>.
 *
 * Author:
 *        Jerry Casiano <JerryCasiano@gmail.com>
*/

namespace FontConfig {

    /**
     * Source - Represents a font directory
     *
     * @active      true if source is enabled for other applications
     * @name        suitable for display
     * @path        full path to directory
     * @available   whether source actually exists
     * icon_name    icon name representing source state
     *
     * Their purpose is to allow an application to track font directories
     * configured by the user, so that their contents can be previewed in
     * the application even when disabled for others.
     *
     * Sources are disabled by default.
     */
    public class Source : Object {

        public new string name { get; private set; }
        public new bool active { get; set; default = false; }
        public string? path { get; private set; default = null; }

        File? _file = null;
        public File? file {
            get {
                return _file;
            }
            set {
                _file = value;
                update();
            }
        }

        public bool available {
            get {
                if (file == null)
                    return false;
                return file.query_exists();
            }
        }

        public string icon_name {
            get {
                if (available)
                    return "folder-symbolic";
                else
                    return "action-unavailable-symbolic";
            }
        }

        public Source (File? f = null) {
            Object(file: f);
        }

        /**
         * Returns the path to source parent directory or "Source Unavailable"
         */
        public string get_dirname () {
            return path != null ? Path.get_dirname(path) : _("Source Unavailable");
        }

        public void update () {
            name = "FontConfigSource";
            path = null;
            active = false;
            if (file == null)
                return;
            path = file.get_path();
            try {
                FileInfo info = file.query_info(FileAttribute.STANDARD_DISPLAY_NAME, FileQueryInfoFlags.NONE);
                name = Markup.escape_text(info.get_display_name());
            } catch (Error e) {
                name = _("Source Unavailable");
            }
            return;
        }

    }

    /**
     * Sources - Represents an application specific configuration file
     *
     * @config_dir      directory to store configuration file
     * @target_file     filename
     *
     * <source> elements contain the full path to a directory containing
     * font files which should be available for preview within the application
     * and easily enabled for others.
     *
     * Is actually a #Gee.HashSet holding directory paths.
     * Provides methods to save() / load() configuration files.
     *
     * @seealso     load_user_font_sources ()
     */
    public class Sources : Gee.HashSet <Source> {

        public signal void changed (File? file, FileMonitorEvent? event);
        public signal void removed (string path);

        public string config_dir { get; set; default = get_package_config_dir(); }
        public string target_file { get; set; default = "Sources.xml"; }
        public string target_element { get; set; default = "source"; }

        /**
         * Sources:active:
         *
         * Internal copy of #Directories, kept in order to update FontConfig
         * directory configuration whenever a #Source is activated.
         */
        public Directories active { get; private set;}

        MonitoredFiles monitors;

        public Sources () {
            active = new Directories();
            monitors = new MonitoredFiles();
            monitors.changed.connect((f, of, ev) => {
                this.update();
                this.changed(f, ev);
            });
        }

        public string get_filepath () {
            return Path.build_filename(config_dir, target_file);
        }

        public new bool contains (string path) {
            foreach (var source in this)
                if (source.path.contains(path))
                    return true;
            return false;
        }

        public void update () {
            foreach (var source in this) {
                source.update();
                source.active = (source.path in active);
            }
            return;
        }

        public bool add_from_path (string dirpath) {
            return add(new Source(File.new_for_path(dirpath)));
        }

        public new bool add (Source source) {
            foreach (var _source in this) {
                if (_source.path == source.path) {
                    warning("Attempted to add duplicate source : %s", source.path);
                    return false;
                }
            }
            if (source.path in active)
                source.active = true;
            source.notify["active"].connect(() => { source_activated(source); });
            monitors.add(source.path);
            this.changed(source.file, FileMonitorEvent.CREATED);
            return base.add(source);
        }

        public new bool remove (Source source) {
            if (active.contains(source.path)) {
                active.remove(source.path);
                active.save();
            }
            this.removed(source.path);
            this.changed(source.file, FileMonitorEvent.DELETED);
            return (monitors.remove(source.path) && base.remove(source));
        }

        void source_activated (Source source) {
            if (source.active)
                active.add(source.path);
            else if (source.path in active)
                active.remove(source.path);
            active.save();
            return;
        }

        void add_sources_from_directories () {
            foreach (var path in active)
                add_from_path(path);
            return;
        }

        public bool load () {
            string target = get_filepath();
            {
                File file = File.new_for_path(target);
                if (!file.query_exists())
                    return false;
            }
            Xml.Parser.init();
            verbose("Xml.Parser : Opening : %s", target);
            Xml.Doc * doc = Xml.Parser.parse_file(target);
            if (doc == null) {
                /* File not found */
                Xml.Parser.cleanup();
                return false;
            }
            Xml.Node * root = doc->get_root_element();
            if (root == null) {
                /* Empty doc */
                delete doc;
                Xml.Parser.cleanup();
                return false;
            }
            parse_node(root->children);
            verbose("Xml.Parser : Closing : %s", target);
            delete doc;
            Xml.Parser.cleanup();
            active.load();
            add_sources_from_directories();
            return true;
        }

        public bool save () {
            /* XmlWriter not used here because this is application specific */
            var writer = new Xml.TextWriter.filename(get_filepath());
            writer.set_indent(true);
            writer.set_indent_string("  ");
            writer.start_document();
            writer.write_string("<!DOCTYPE Sources SYSTEM \"sources.dtd\">\n");
            writer.write_comment(_(" Generated by Font Manager. Do NOT edit this file. "));
            writer.start_element("Sources");
            write_node(writer);
            writer.end_element();
            writer.end_document();
            return (writer.flush() >= 0);
        }

        protected void write_node (Xml.TextWriter writer) {
            foreach (var source in this)
                writer.write_element(target_element, Markup.escape_text(source.path.strip()));
            return;
        }

        protected void parse_node (Xml.Node * node) {
            for (Xml.Node * iter = node; iter != null; iter = iter->next) {
                /* Spaces between tags are also nodes, discard them */
                if (iter->type != Xml.ElementType.ELEMENT_NODE)
                    continue;
                string content = iter->get_content().strip();
                if (content == "")
                    continue;
                debug("Loading source : %s", content);
                add_from_path(content);
            }
            return;
        }

    }

}
