/* Application.vala
 *
 * Copyright (C) 2009 - 2016 Jerry Casiano
 *
 * This file is part of Font Manager.
 *
 * Font Manager is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Font Manager is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Font Manager.  If not, see <http://www.gnu.org/licenses/gpl-3.0.txt>.
 *
 * Author:
 *        Jerry Casiano <JerryCasiano@gmail.com>
*/

namespace FontManager {

    const string BUS_ID = "org.gnome.FontManager";
    const string BUS_PATH = "/org/gnome/FontManager";

    void set_application_style () {
        Gtk.IconTheme.get_default().add_resource_path("/org/gnome/FontManager/icons");
        string css_uri = "resource:///org/gnome/FontManager/FontManager.css";
        File css_file = File.new_for_uri(css_uri);
        Gtk.CssProvider provider = new Gtk.CssProvider();
        try {
            provider.load_from_file(css_file);
        } catch (Error e) {
            warning("Failed to load Css Provider! Application will not appear as expected.");
            warning(e.message);
        }
        Gtk.StyleContext.add_provider_for_screen(Gdk.Screen.get_default(), provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION);
        return;
    }

    [DBus (name = "org.gnome.FontManager")]
    public class Application: Gtk.Application  {

        [DBus (visible = false)]
        public bool use_csd { get; set; default = true; }

        const OptionEntry[] options = {
            { "about", 'a', 0, OptionArg.NONE, null, "About the application", null },
            { "version", 'v', 0, OptionArg.NONE, null, "Show application version", null },
            { "install", 'i', 0, OptionArg.NONE, null, "Space separated list of files to install.", null },
            { "enable", 'e', 0, OptionArg.STRING_ARRAY, null, "Enable specified font family", null },
            { "disable", 'd', 0, OptionArg.STRING_ARRAY, null, "Disable specified font family", null },
            { "list", 0, 0, OptionArg.NONE, null, "List available font families.", null },
            { "list-full", 0, 0, OptionArg.NONE, null, "Full listing including face information. (JSON)", null },
            { "debug", 'D', 0, OptionArg.NONE, null, "Enable debugging messages.", null },
            { "verbose", 'V', 0, OptionArg.NONE, null, "Verbose logging. Lots of output.", null },
            { "fatal", 'F', 0, OptionArg.NONE, null, "Fatal errors", null },
            { "", 0, 0, OptionArg.FILENAME_ARRAY, null, null, null },
            { null }
        };

        uint dbus_id = 0;

        public Application (string app_id, ApplicationFlags app_flags) {
            Object(application_id : app_id, flags : app_flags);
            add_main_option_entries(options);
        }

        public void install (string [] paths) {
            File [] filelist = null;
            foreach (var path in paths)
                filelist += File.new_for_path(path);
            Library.Install.from_file_array(filelist);
            return;
        }

        public void enable (string [] families) {
            Main.instance.reject.remove_all_array(families);
            Main.instance.reject.save();
            return;
        }

        public void disable (string [] families) {
            Main.instance.reject.add_all_array(families);
            Main.instance.reject.save();
            return;
        }

        public override void startup () {
            base.startup();
            Main.instance.at_startup();
            return;
        }

        public override void open (File [] files, string hint) {
            Main.instance.handle_open(files[0]);
            return;
        }

        public override int command_line (ApplicationCommandLine cl) {
            return Main.instance.handle_command_line(cl);
        }


        public override int handle_local_options (VariantDict options) {
            return Main.instance.handle_local_options(options);
        }

        protected override void activate () {
            Main.instance.on_activate();
            return;
        }

        public new void quit () {
            Main.instance.on_quit();
            base.quit();
            return;
        }

        public void about () {
            Gtk.show_about_dialog(Main.instance.main_window,
                                "program-name", About.NAME,
                                "logo-icon-name", About.ICON,
                                "version", About.VERSION,
                                "copyright", About.COPYRIGHT,
                                "comments", About.COMMENT,
                                "website", About.HOMEPAGE,
                                "authors", About.AUTHORS,
                                "license", About.LICENSE,
                                //"artists", About.ARTISTS,
                                "translator-credits", About.TRANSLATORS,
                                null);
            return;
        }

        public void help () {
            try {
                Gtk.show_uri(null, "help:%s".printf("@PACKAGE_NAME@"), Gdk.CURRENT_TIME);
            } catch (Error e) {
                critical("There was an error displaying help contents : %s", e.message);
            }
            return;
        }

        public override bool dbus_register (DBusConnection conn, string path) throws Error {
            base.dbus_register(conn, path);
            dbus_id = conn.register_object (BUS_PATH, this);
            if (dbus_id == 0)
                critical("Could not register Font Manager service ");
            return true;
        }

        public override void dbus_unregister (DBusConnection conn, string path) {
            if (dbus_id != 0)
                conn.unregister_object(dbus_id);
            base.dbus_unregister(conn, path);
        }

        public static int main (string [] args) {
            Logging.setup(About.NAME);
            GLib.Intl.bindtextdomain("@PACKAGE_NAME@", null);
            GLib.Intl.bind_textdomain_codeset("@PACKAGE_NAME@", null);
            GLib.Intl.textdomain("@PACKAGE_NAME@");
            GLib.Intl.setlocale(GLib.LocaleCategory.ALL, null);
            Environment.set_application_name(About.NAME);
            Environment.set_variable("XDG_CONFIG_HOME", "", true);
            FontConfig.enable_user_config(false);
            Gtk.init(ref args);
            if (update_declined())
                return 0;
            set_application_style();
            return new Application(BUS_ID, (ApplicationFlags.HANDLES_OPEN | ApplicationFlags.HANDLES_COMMAND_LINE)).run(args);
        }

    }

}


