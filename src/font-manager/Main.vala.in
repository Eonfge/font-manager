/* Main.vala
 *
 * Copyright (C) 2009 - 2016 Jerry Casiano
 *
 * This file is part of Font Manager.
 *
 * Font Manager is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Font Manager is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Font Manager.  If not, see <http://www.gnu.org/licenses/gpl-3.0.txt>.
 *
 * Author:
 *        Jerry Casiano <JerryCasiano@gmail.com>
*/

namespace FontManager {

    void queue_reload () {
        /* Note :
         * There used to be a two second delay built into gnome-settings-daemon.
         * Not sure why...
         * It was removed at some point, but still seems like a good idea to me.
         */
        Timeout.add_seconds(3, () => {
            Main.instance.update();
            return false;
        });
        return;
    }

    void set_g_app_menu (Gtk.Application app, Gtk.Builder builder, string menu_id) {
        try {
            builder.add_from_resource("/org/gnome/FontManager/ApplicationMenu.ui");
            app.app_menu = builder.get_object(menu_id) as GLib.MenuModel;
        } catch (Error e) {
            warning("Failed to set application menu : %s : %s", menu_id, e.message);
        }
        return;
    }

    public class Main : Object {

        public static unowned Main instance {
            get {
                return _instance.once (() => { return new Main (); });
            }
        }

        static GLib.Once <Main> _instance;

        public signal void progress (string? message, int processed, int total);

        public Database database { get; private set; }
        public FontConfig.Sources sources { get; private set; }
        public FontConfig.Families families { get; private set; }
        public FontConfig.Reject reject { get; private set; }
        public MainWindow main_window { get; private set; }
        public FontModel font_model { get; private set; }
        public Settings? settings { get; private set; default = null; }
        public State? state { get; private set; default = null; }

        weak Application application;
        bool update_in_progress = false;
        bool queue_update = false;

        public Main () {
            application = ((Application) GLib.Application.get_default());
            settings = get_gsettings(BUS_ID);
            if (settings != null)
                application.use_csd = settings.get_boolean("use-csd");
            families = new FontConfig.Families();
            font_model = new FontModel(families);
            reject = new FontConfig.Reject();
            sources = new FontConfig.Sources();
        }

        public void handle_open (File file) {
            try {
                DBusConnection conn = Bus.get_sync(BusType.SESSION);
                conn.call_sync("org.gnome.FontViewer",
                                "/org/gnome/FontViewer",
                                "org.gnome.FontViewer",
                                "ShowUri",
                                new Variant("(s)", file.get_uri()),
                                null,
                                DBusCallFlags.NONE,
                                -1,
                                null);
            } catch (Error e) {
                critical("Method call to org.gnome.FontViewer failed : %s", e.message);
            }
            return;
        }

        public int handle_command_line (ApplicationCommandLine cl) {
            application.hold();

            VariantDict options = cl.get_options_dict();
            File []? filelist = get_command_line_files(cl);

            if (options.contains("debug"))
                Logger.DisplayLevel = LogLevel.DEBUG;

            if (options.contains("verbose"))
                Logger.DisplayLevel = LogLevel.VERBOSE;

            if (options.contains("fatal"))
                Log.set_always_fatal(LogLevelFlags.LEVEL_CRITICAL);

            if (filelist == null) {
                application.activate();
            } else if (options.contains("install")) {
                Library.Install.from_file_array(filelist);
            } else {
                handle_open(filelist[0]);
            }

            application.release();
            return 0;
        }

        public int handle_local_options (VariantDict options) {

            int exit_status = -1;

            if (options.contains("version")) {
                show_version();
                exit_status = 0;
            }

            if (options.contains("about")) {
                show_about();
                exit_status = 0;
            }

            if (options.contains("enable")) {
                reject.load();
                Variant v = options.lookup_value("enable", VariantType.STRING_ARRAY);
                string [] accept = v.get_strv();
                reject.remove_all_array(accept);
                reject.save();
                exit_status = 0;
            }

            if (options.contains("disable")) {
                reject.load();
                Variant v = options.lookup_value("disable", VariantType.STRING_ARRAY);
                string [] rejects = v.get_strv();
                reject.add_all_array(rejects);
                reject.save();
                exit_status = 0;
            }

            if (options.contains("list")) {
                families.update();
                assert(families.size > 0);
                foreach (string family in families.list())
                    stdout.printf("%s\n", family);
                exit_status = 0;
            }

            if (options.contains("list-full")) {
                sources.load();
                FontConfig.enable_user_config(false);
                FontConfig.load_user_fontconfig_files();
                if (!FontConfig.load_user_font_sources(sources.to_array()))
                    critical("Failed to register user font sources with FontConfig! User fonts may be unavailable for preview.");
                sources.update();
                families.update();
                stdout.printf("\n%s\n\n", families.to_data());
                exit_status = 0;
            }

            return exit_status;
        }

        public void at_startup () {
            try {
                database = get_database();
            } catch (Error e) {
                error("Failed to initialize database : %s", e.message);
            }
            families.progress.connect((m, p, t) => { progress(m, p, t); });
        }

        public void on_activate () {

            show_version_information();

            if (main_window != null) {
                main_window.present();
                return;
            }

            main_window = new MainWindow();
            state = new State(main_window, BUS_ID);
            main_window.realize.connect(state.restore);
            application.add_window(main_window);
            progress.connect((m, p, t) => {
                main_window.progress = ((float) p /(float) t);
                ensure_ui_update();
            });
            if (application.prefers_app_menu())
                set_g_app_menu(application, new Gtk.Builder(), "@PACKAGE_NAME@");
            reject.load();
            sources.load();
            main_window.present();
            do_initial_update();
            sources.removed.connect((p) => {
                try {
                    prune_path_from_database(database, p);
                } catch (FontManager.DatabaseError e) {
                    warning(e.message);
                }
            });
            sources.changed.connect((f, ev) => {
                queue_reload();
            });
            return;
        }

        public void on_quit () {
            state.save();
            return;
        }

        public void update () {

            if (update_in_progress) {
                queue_update = true;
                return;
            } else {
                queue_update = false;
            }

            update_in_progress = true;
            debug("Updating font configuration");
            FontConfig.update_cache();
            main_window.font_model = null;
            main_window.loading = true;
            main_window.sidebar.category_model.clear();
            ensure_ui_update();
            FontConfig.enable_user_config(false);
            FontConfig.load_user_fontconfig_files();
            FontConfig.load_user_font_sources(sources.to_array());
            sync_database();
            families.update();
            main_window.loading = false;
            main_window.set_models();
            ensure_ui_update();
            main_window.sidebar.category_model.update.begin((obj, res) => {
                main_window.sidebar.category_model.update.end(res);
                main_window.reset_selections();
            });
            update_in_progress = false;
            if (queue_update)
                Idle.add(() => { update(); return false; });
            return;
        }

        void do_initial_update () {
            main_window.font_model = null;
            main_window.loading = true;
            ensure_ui_update();
            FontConfig.enable_user_config(false);
            FontConfig.load_user_fontconfig_files();
            FontConfig.load_user_font_sources(sources.to_array());
            sync_database();
            families.update();
            font_model.update();
            main_window.loading = false;
            main_window.set_models();
            /* Unset the browse model, allow categories to load, before render */
            main_window.browser.model = null;
            main_window.sidebar.category_model.update.begin((obj, res) => {
                main_window.sidebar.category_model.update.end(res);
                Idle.add(() => {
                    main_window.browser.model = Main.instance.font_model;
                    state.restore_selections();
                    state.post_activate();
                    state.bind_settings();
                    application.notify["use-csd"].connect(() => {
                        state.save();
                    });
                    return false;
                });
            });
            return;
        }

        void sync_database () {
            try {
                sync_fonts_table(database, FontConfig.list_fonts(), (m, p, t) => { Main.instance.progress(m, p, t); });
            } catch (DatabaseError e) {
                critical("Database synchronization failed : %s", e.message);
            }
            return;
        }

        void show_version_information () {
            debug("Font Manager %s", About.VERSION);
            debug("Using GLib %u.%u.%u", Version.major, Version.minor, Version.micro);
            debug("Using JSON-GLib %s", Json.VERSION_S);
            debug("Using SQLite %s", Sqlite.VERSION);
            debug("Using FontConfig %s", FontConfig.get_version_string());
            debug("Using Pango %s", Pango.version_string());
            debug("Using GTK+ %i.%i.%i", Gtk.MAJOR_VERSION, Gtk.MINOR_VERSION, Gtk.MICRO_VERSION);
            if (Gdk.Screen.get_default().is_composited())
                debug("Screen is composited. Client side decorations enabled.");
            if (Gnome3())
                debug("Running on %s", get_command_line_output("gnome-shell --version"));
            else
                debug("Running on %s", Environment.get_variable("XDG_CURRENT_DESKTOP"));
            return;
        }

    }

}
