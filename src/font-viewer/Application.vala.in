/* Application.vala
 *
 * Copyright (C) 2009 - 2016 Jerry Casiano
 *
 * This file is part of Font Manager.
 *
 * Font Manager is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Font Manager is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Font Manager.  If not, see <http://www.gnu.org/licenses/gpl-3.0.txt>.
 *
 * Author:
 *        Jerry Casiano <JerryCasiano@gmail.com>
*/

namespace FontManager {

    namespace FontViewer {

        const string BUS_ID = "org.gnome.FontViewer";
        const string BUS_PATH = "/org/gnome/FontViewer";

        [DBus (name = "org.gnome.FontViewer")]
        public class Application : Gtk.Application {

            [DBus (visible = false)]
            public MainWindow? main_window { get; private set; default = null; }

            uint dbus_id = 0;
            bool activate_called = false;
            State? state = null;

            public Application (string app_id, ApplicationFlags app_flags) {
                Object(application_id : app_id, flags : app_flags);
            }

            public override void startup () {
                base.startup();
                main_window = new MainWindow();
                main_window.application = this;
                add_window(main_window);
                state = new State(main_window, BUS_ID);
                return;
            }

            void activate_if_needed () {
                if (!activate_called)
                    this.activate();
                else {
                    main_window.update();
                    main_window.present();
                }
                return;
            }

            public bool ready () {
                return main_window.ready();
            }

            public void show_uri (string uri) {
                main_window.show_uri(uri);
                activate_if_needed();
                return;
            }

            public override void open (File [] files, string hint) {
                main_window.open(files[0].get_path());
                activate_if_needed();
                return;
            }

            protected override void activate () {
                activate_called = true;
                state.restore();
                main_window.present();
                main_window.update();
                state.bind();
                state.post_activate();
                return;
            }

            public void about () {
                warning("About dialog not implemented!");
                return;
            }

            public new void quit () {
                state.save();
                base.quit();
                return;
            }

            public override bool dbus_register (DBusConnection conn, string path) throws Error {
                base.dbus_register(conn, path);
                dbus_id = conn.register_object (BUS_PATH, this);
                if (dbus_id == 0)
                    critical("Could not register Font Viewer service ");
                return true;
            }

            public override void dbus_unregister (DBusConnection conn, string path) {
                if (dbus_id != 0)
                    conn.unregister_object(dbus_id);
                base.dbus_unregister(conn, path);
            }

            public static int main (string [] args) {
                Logging.setup("Font Viewer");
                GLib.Intl.bindtextdomain("@PACKAGE_NAME@", null);
                GLib.Intl.bind_textdomain_codeset("@PACKAGE_NAME@", null);
                GLib.Intl.textdomain("@PACKAGE_NAME@");
                GLib.Intl.setlocale(GLib.LocaleCategory.ALL, null);
                Environment.set_application_name(_("Font Viewer"));
                Environment.set_variable("XDG_CONFIG_HOME", "", true);
                FontConfig.enable_user_config(false);
                Gtk.init(ref args);
                return new Application(BUS_ID, (ApplicationFlags.HANDLES_OPEN)).run(args);
            }

        }

    }

}

