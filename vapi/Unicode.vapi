/* Unicode.vapi generated by vapigen-0.36, do not modify. */

[CCode (cprefix = "Unicode", gir_namespace = "Unicode", gir_version = "Unicode", lower_case_cprefix = "unicode_")]
namespace Unicode {
	[CCode (cheader_filename = "unicode.h", type_id = "unicode_block_codepoint_list_get_type ()")]
	public class BlockCodepointList : GLib.Object, Unicode.CodepointList {
		[CCode (has_construct_function = false)]
		public BlockCodepointList (unichar start, unichar end);
		[NoAccessorMethod]
		public uint first_codepoint { get; construct; }
		[NoAccessorMethod]
		public uint last_codepoint { get; construct; }
	}
	[CCode (cheader_filename = "unicode.h", type_id = "unicode_block_model_get_type ()")]
	public class BlockModel : Gtk.ListStore, Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable, Unicode.ChaptersModel {
		[CCode (has_construct_function = false)]
		public BlockModel ();
	}
	[CCode (cheader_filename = "unicode.h", type_id = "unicode_character_map_get_type ()")]
	public class CharacterMap : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CharacterMap ();
		public unichar get_active_character ();
		public unowned Unicode.CodepointList get_codepoint_list ();
		public Pango.FontDescription get_font_desc ();
		[NoWrapper]
		public virtual void set_active_char (uint ch);
		public void set_active_character (unichar wc);
		public void set_codepoint_list (Unicode.CodepointList codepoint_list);
		public void set_font_desc (Pango.FontDescription font_desc);
		[NoWrapper]
		public virtual void set_scroll_adjustments (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment);
		public uint active_character { get; set; }
		public Unicode.CodepointList codepoint_list { get; set; }
		public Pango.FontDescription font_desc { owned get; set; }
		public virtual signal void activate ();
		public virtual signal void copy_clipboard ();
		public virtual signal bool move_cursor (Gtk.MovementStep step, int count);
		public virtual signal void paste_clipboard ();
		public virtual signal void status_message (string message);
	}
	[CCode (cheader_filename = "unicode.h", type_id = "unicode_script_codepoint_list_get_type ()")]
	public class ScriptCodepointList : GLib.Object, Unicode.CodepointList {
		[CCode (has_construct_function = false)]
		public ScriptCodepointList ();
		public bool set_script (string script);
	}
	[CCode (cheader_filename = "unicode.h", type_id = "unicode_script_model_get_type ()")]
	public class ScriptModel : Gtk.ListStore, Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable, Unicode.ChaptersModel {
		[CCode (has_construct_function = false)]
		public ScriptModel ();
	}
	[CCode (cheader_filename = "unicode.h", type_cname = "UnicodeChaptersModelInterface", type_id = "unicode_chapters_model_get_type ()")]
	public interface ChaptersModel : GLib.Object {
		public abstract bool character_to_iter (unichar ch, out Gtk.TreeIter iter);
		public abstract Unicode.CodepointList get_codepoint_list (Gtk.TreeIter iter);
		public unowned string get_title ();
		public bool id_to_iter (string id, out Gtk.TreeIter iter);
	}
	[CCode (cheader_filename = "unicode.h", type_cname = "UnicodeCodepointListInterface", type_id = "unicode_codepoint_list_get_type ()")]
	public interface CodepointList : GLib.Object {
		public abstract unichar get_char (int index);
		public abstract int get_index (unichar wc);
		public abstract int get_last_index ();
	}
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_category_name (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_codepoint_data_name (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static int get_codepoint_data_name_count ();
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_codepoint_name (unichar uc);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "unicode.h")]
	public static (unowned string)[] get_nameslist_colons (unichar uc);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "unicode.h")]
	public static (unowned string)[] get_nameslist_equals (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unichar get_nameslist_exes (unichar uc);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "unicode.h")]
	public static (unowned string)[] get_nameslist_pounds (unichar uc);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "unicode.h")]
	public static (unowned string)[] get_nameslist_stars (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_script_for_char (unichar wc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_unicode_kCantonese (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_unicode_kDefinition (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_unicode_kHangul (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_unicode_kJapaneseKun (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_unicode_kJapaneseOn (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_unicode_kKorean (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_unicode_kMandarin (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_unicode_kTang (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static unowned string get_unicode_kVietnamese (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static int get_unihan_count ();
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "unicode.h")]
	public static (unowned string)[] list_scripts ();
	[CCode (cheader_filename = "unicode.h")]
	public static bool unichar_isdefined (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static bool unichar_isgraph (unichar uc);
	[CCode (cheader_filename = "unicode.h")]
	public static int unichar_to_printable_utf8 (unichar uc, string outbuf);
	[CCode (cheader_filename = "unicode.h")]
	public static bool unichar_validate (unichar uc);
}
